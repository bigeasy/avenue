#!/usr/bin/env node

require('proof')(1, function (ok, deepEqual) {
    var find = require('../..'), path = require('path')
    var found = find(path.join(__dirname, 'fixtures'), 'js')
    deepEqual(found,
[ { route: '/',
    script: 'index_.t.js',
    path: [],
    file: 'index_.t.js',
    name: 'index',
    extension: 't' },
  { route: '//**:pathInfo',
    script: 'index_.t.js',
    path: [],
    file: 'index_.t.js',
    name: 'index',
    extension: 't' },
  { route: '/pathed_before_exact',
    script: 'pathed_before_exact_.t.js',
    path: [ 'pathed_before_exact' ],
    file: 'pathed_before_exact_.t.js',
    name: 'pathed_before_exact',
    extension: 't' },
  { route: '/pathed_before_exact/**:pathInfo',
    script: 'pathed_before_exact_.t.js',
    path: [ 'pathed_before_exact' ],
    file: 'pathed_before_exact_.t.js',
    name: 'pathed_before_exact',
    extension: 't' },
  { route: '/pathed_before_exact',
    script: 'pathed_before_exact.t.js',
    path: [ 'pathed_before_exact' ],
    file: 'pathed_before_exact.t.js',
    name: 'pathed_before_exact',
    extension: 't' },
  { route: '/pathed',
    script: 'pathed_.get.js',
    path: [ 'pathed' ],
    file: 'pathed_.get.js',
    name: 'pathed',
    extension: 'get' },
  { route: '/pathed/**:pathInfo',
    script: 'pathed_.get.js',
    path: [ 'pathed' ],
    file: 'pathed_.get.js',
    name: 'pathed',
    extension: 'get' },
  { route: '/',
    script: 'index.t.js',
    path: [],
    file: 'index.t.js',
    name: 'index',
    extension: 't' },
  { route: '/exact',
    script: 'exact.js',
    path: [ 'exact' ],
    file: 'exact.js',
    name: 'exact',
    extension: '' },
  { route: '/directory',
    script: 'directory/index.get.js',
    path: [ 'directory' ],
    file: 'index.get.js',
    name: 'index',
    extension: 'get' },
  { route: '/*:param/edit',
    script: '%param/edit.js',
    path: [ '%param', 'edit' ],
    file: 'edit.js',
    name: 'edit',
    extension: '' } ], 'found')
    console.log(require('util').inspect(found, false, Infinity))
    console.log(require('util').inspect(found.map(function (step) {
        return step.script
    }), false, Infinity))
})
